!function(e){var t={};function n(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(s,r,function(t){return e[t]}.bind(null,r));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var s=this&&this.__decorate||function(e,t,n,s){var r,i=arguments.length,o=i<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,n):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(i<3?r(o):i>3?r(t,n,o):r(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o},r=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const o=n(3),a=n(1);let l=class extends o.LitElement{constructor(){super(),this.componentReady=!1,this.timerStarted=!1,this.counter=0}render(){return o.html`
      <link
        rel="stylesheet"
        href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css"
      />

      <div class="mdc-card mdc-card--outlined ${this.componentReady?"":"hidden"}">
        <div class="my-card__media mdc-card__media mdc-card__media--16-9">
          <div class="mdc-card__media-content">
            <h1>${this.counter}</h1>
            <div role="progressbar" class="mdc-linear-progress ${this.timerStarted?"mdc-linear-progress--indeterminate":""}">
              <div class="mdc-linear-progress__buffering-dots"></div>
              <div class="mdc-linear-progress__buffer"></div>
              <div class="mdc-linear-progress__bar mdc-linear-progress__primary-bar">
                <span class="mdc-linear-progress__bar-inner"></span>
              </div>
              <div class="mdc-linear-progress__bar mdc-linear-progress__secondary-bar">
                <span class="mdc-linear-progress__bar-inner"></span>
              </div>
            </div>
          </div>
        </div>

        <div class="mdc-card__actions">
          <button class="mdc-button mdc-card__action mdc-card__action--button" @click="${this.startTimer}" ?disabled="${this.timerStarted}">
            <span class="mdc-button__label">Start</span>
          </button>
          <button class="mdc-button mdc-card__action mdc-card__action--button" @click="${this.stopTimer}" ?disabled="${!this.timerStarted}">
            <span class="mdc-button__label">Stop</span>
          </button>
        </div>
      </div>
    `}async connectedCallback(){super.connectedCallback();try{const{TimerWorker:e}=await Promise.resolve().then(()=>i(n(2))),t=new Blob([`;;(() => {importScripts("https://cdn.jsdelivr.net/npm/comlinkjs@3/umd/comlink.js");${e.toString()};Comlink.expose(TimerWorker, self);})()`],{type:"application/javascript"}),s=await a.proxy(new Worker(URL.createObjectURL(t)));this.timerWorker=await new s,this.timerWorker&&(this.counter=await this.timerWorker.counter,await this.timerWorker.setUpdateCallback(a.proxyValue(()=>{document.dispatchEvent(new CustomEvent("value-updated"))}))),document.addEventListener("value-updated",async()=>{this.timerWorker&&(this.counter=await this.timerWorker.counter)})}catch(e){console.error(e)}this.componentReady=!0}disconnectedCallback(){this.stopTimer(),this.timerWorker=void 0}async startTimer(){this.timerWorker&&(await this.timerWorker.startTimer(),this.timerStarted=!0)}async stopTimer(){this.timerWorker&&(await this.timerWorker.stopTimer(),this.timerStarted=!1)}};l.styles=o.css`
    .hidden {
      display: none;
    }

    .mdc-card {
      padding: 1rem;
    }
  `,s([o.property({type:Boolean}),r("design:type",Object)],l.prototype,"componentReady",void 0),s([o.property({type:Boolean}),r("design:type",Object)],l.prototype,"timerStarted",void 0),s([o.property({type:Number}),r("design:type",Object)],l.prototype,"counter",void 0),l=s([o.customElement("timer-app"),r("design:paramtypes",[])],l),t.TimerApp=l},function(e,t,n){"use strict";n.r(t),n.d(t,"transferHandlers",function(){return a}),n.d(t,"proxy",function(){return c}),n.d(t,"proxyValue",function(){return d}),n.d(t,"expose",function(){return u});const s=["ArrayBuffer","MessagePort","OffscreenCanvas"].filter(e=>e in self).map(e=>self[e]),r=Math.floor(Math.random()*Number.MAX_SAFE_INTEGER),i=Symbol("proxyValue"),o=Symbol("throw"),a=new Map([["PROXY",{canHandle:e=>e&&e[i],serialize:e=>{const{port1:t,port2:n}=new MessageChannel;return u(e,t),n},deserialize:e=>c(e)}],["THROW",{canHandle:e=>e&&e[o],serialize:e=>{const t=e&&e.message,n=e&&e.stack;return Object.assign({},e,{message:t,stack:n})},deserialize:e=>{throw Object.assign(Error(),e)}}]]);let l=0;function c(e,t){if(g(e)&&(e=f(e)),!y(e))throw Error("endpoint does not have all of addEventListener, removeEventListener and postMessage defined");return v(e),function e(t,n=[],s=function(){}){return new Proxy(s,{construct:(e,s,r)=>t({type:"CONSTRUCT",callPath:n,argumentsList:s}),apply:(s,r,i)=>"bind"===n[n.length-1]?e(t,n.slice(0,-1)):t({type:"APPLY",callPath:n,argumentsList:i}),get(s,r,i){if("then"===r&&0===n.length)return{then:()=>i};if("then"===r){const e=t({type:"GET",callPath:n});return Promise.resolve(e).then.bind(e)}return e(t,n.concat(r),s[r])},set:(e,s,r,i)=>t({type:"SET",callPath:n,property:s,value:r})})}(async t=>{let n=[];return"APPLY"!==t.type&&"CONSTRUCT"!==t.type||(n=t.argumentsList.map(p)),h((await function(e,t,n){const s=`${r}-${l++}`;return new Promise(r=>{_(e,function t(n){n.data.id===s&&(!function(e,t){e.removeEventListener("message",t)}(e,t),r(n))}),t=Object.assign({},t,{id:s}),e.postMessage(t,n)})}(e,Object.assign({},t,{argumentsList:n}),w(n))).data.value)},[],t)}function d(e){return e[i]=!0,e}function u(e,t){if(g(t)&&(t=f(t)),!y(t))throw Error("endpoint does not have all of addEventListener, removeEventListener and postMessage defined");v(t),_(t,async function(n){if(!n.data.id||!n.data.callPath)return;const s=n.data;let r=await s.callPath.slice(0,-1).reduce((e,t)=>e[t],e),i=await s.callPath.reduce((e,t)=>e[t],e),l=i,c=[];if("APPLY"!==s.type&&"CONSTRUCT"!==s.type||(c=s.argumentsList.map(h)),"APPLY"===s.type)try{l=await i.apply(r,c)}catch(e){(l=e)[o]=!0}if("CONSTRUCT"===s.type)try{l=d(l=new i(...c))}catch(e){(l=e)[o]=!0}return"SET"===s.type&&(i[s.property]=s.value,l=!0),(l=function(e){for(const[t,n]of a)if(n.canHandle(e)){const s=n.serialize(e);return{value:{type:t,value:s}}}return{value:{type:"RAW",value:e}}}(l)).id=s.id,t.postMessage(l,w([l]))})}function p(e){for(const[t,n]of a)if(n.canHandle(e))return{type:t,value:n.serialize(e)};let t=[];for(const n of b(e))for(const[e,s]of a)s.canHandle(n.value)&&t.push({path:n.path,wrappedValue:{type:e,value:s.serialize(n.value)}});for(const n of t){n.path.slice(0,-1).reduce((e,t)=>e[t],e)[n.path[n.path.length-1]]=null}return{type:"RAW",value:e,wrappedChildren:t}}function h(e){if(a.has(e.type)){return a.get(e.type).deserialize(e.value)}if(function(e){return"RAW"===e.type}(e)){for(const t of e.wrappedChildren||[]){if(!a.has(t.wrappedValue.type))throw Error(`Unknown value type "${e.type}" at ${t.path.join(".")}`);const n=a.get(t.wrappedValue.type).deserialize(t.wrappedValue.value);m(e.value,t.path,n)}return e.value}throw Error(`Unknown value type "${e.type}"`)}function m(e,t,n){const s=t.slice(-1)[0];t.slice(0,-1).reduce((e,t)=>e[t],e)[s]=n}function f(e){if("Window"!==self.constructor.name)throw Error("self is not a window");return{addEventListener:self.addEventListener.bind(self),removeEventListener:self.removeEventListener.bind(self),postMessage:(t,n)=>e.postMessage(t,"*",n)}}function y(e){return"addEventListener"in e&&"removeEventListener"in e&&"postMessage"in e}function v(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.start()}function _(e,t){e.addEventListener("message",t)}function g(e){return["window","length","location","parent","opener"].every(t=>t in e)}function S(e){return s.some(t=>e instanceof t)}function*b(e,t=[],n=null){if(!e)return;if(n||(n=new WeakSet),n.has(e))return;if("string"==typeof e)return;if("object"==typeof e&&n.add(e),ArrayBuffer.isView(e))return;yield{value:e,path:t};const s=Object.keys(e);for(const r of s)yield*b(e[r],[...t,r],n)}function w(e){const t=[];for(const n of b(e))S(n.value)&&t.push(n.value);return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.TimerWorker=class{constructor(e=0){this._updateCallback=(()=>{}),this.intervalId=0,this._counter=e}get counter(){return this._counter}increment(e=1){this._counter+=e,this._updateCallback()}setUpdateCallback(e){this._updateCallback=e}startTimer(){this.stopTimer(),this.intervalId=setInterval(()=>{this._counter++,this._updateCallback()},10)}stopTimer(){clearInterval(this.intervalId)}}},function(e,t,n){"use strict";n.r(t);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const s=new WeakMap,r=e=>"function"==typeof e&&s.has(e),i=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,o=(e,t,n=null,s=null)=>{let r=t;for(;r!==n;){const t=r.nextSibling;e.insertBefore(r,s),r=t}},a=(e,t,n=null)=>{let s=t;for(;s!==n;){const t=s.nextSibling;e.removeChild(s),s=t}},l={},c={},d=`{{lit-${String(Math.random()).slice(2)}}}`,u=`\x3c!--${d}--\x3e`,p=new RegExp(`${d}|${u}`),h="$lit$";class m{constructor(e,t){this.parts=[],this.element=t;let n=-1,s=0;const r=[],i=t=>{const o=t.content,a=document.createTreeWalker(o,133,null,!1);let l=0;for(;a.nextNode();){n++;const t=a.currentNode;if(1===t.nodeType){if(t.hasAttributes()){const r=t.attributes;let i=0;for(let e=0;e<r.length;e++)r[e].value.indexOf(d)>=0&&i++;for(;i-- >0;){const r=e.strings[s],i=v.exec(r)[2],o=i.toLowerCase()+h,a=t.getAttribute(o).split(p);this.parts.push({type:"attribute",index:n,name:i,strings:a}),t.removeAttribute(o),s+=a.length-1}}"TEMPLATE"===t.tagName&&i(t)}else if(3===t.nodeType){const e=t.data;if(e.indexOf(d)>=0){const i=t.parentNode,o=e.split(p),a=o.length-1;for(let e=0;e<a;e++)i.insertBefore(""===o[e]?y():document.createTextNode(o[e]),t),this.parts.push({type:"node",index:++n});""===o[a]?(i.insertBefore(y(),t),r.push(t)):t.data=o[a],s+=a}}else if(8===t.nodeType)if(t.data===d){const e=t.parentNode;null!==t.previousSibling&&n!==l||(n++,e.insertBefore(y(),t)),l=n,this.parts.push({type:"node",index:n}),null===t.nextSibling?t.data="":(r.push(t),n--),s++}else{let e=-1;for(;-1!==(e=t.data.indexOf(d,e+1));)this.parts.push({type:"node",index:-1})}}};i(t);for(const e of r)e.parentNode.removeChild(e)}}const f=e=>-1!==e.index,y=()=>document.createComment(""),v=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F \x09\x0a\x0c\x0d"'>=\/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class _{constructor(e,t,n){this._parts=[],this.template=e,this.processor=t,this.options=n}update(e){let t=0;for(const n of this._parts)void 0!==n&&n.setValue(e[t]),t++;for(const e of this._parts)void 0!==e&&e.commit()}_clone(){const e=i?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=this.template.parts;let n=0,s=0;const r=e=>{const i=document.createTreeWalker(e,133,null,!1);let o=i.nextNode();for(;n<t.length&&null!==o;){const e=t[n];if(f(e))if(s===e.index){if("node"===e.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(o.previousSibling),this._parts.push(e)}else this._parts.push(...this.processor.handleAttributeExpressions(o,e.name,e.strings,this.options));n++}else s++,"TEMPLATE"===o.nodeName&&r(o.content),o=i.nextNode();else this._parts.push(void 0),n++}};return r(e),i&&(document.adoptNode(e),customElements.upgrade(e)),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */class g{constructor(e,t,n,s){this.strings=e,this.values=t,this.type=n,this.processor=s}getHTML(){const e=this.strings.length-1;let t="";for(let n=0;n<e;n++){const e=this.strings[n],s=v.exec(e);t+=s?e.substr(0,s.index)+s[1]+s[2]+h+s[3]+d:e+u}return t+this.strings[e]}getTemplateElement(){const e=document.createElement("template");return e.innerHTML=this.getHTML(),e}}class S extends g{getHTML(){return`<svg>${super.getHTML()}</svg>`}getTemplateElement(){const e=super.getTemplateElement(),t=e.content,n=t.firstChild;return t.removeChild(n),o(t,n.firstChild),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const b=e=>null===e||!("object"==typeof e||"function"==typeof e);class w{constructor(e,t,n){this.dirty=!0,this.element=e,this.name=t,this.strings=n,this.parts=[];for(let e=0;e<n.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new P(this)}_getValue(){const e=this.strings,t=e.length-1;let n="";for(let s=0;s<t;s++){n+=e[s];const t=this.parts[s];if(void 0!==t){const e=t.value;if(null!=e&&(Array.isArray(e)||"string"!=typeof e&&e[Symbol.iterator]))for(const t of e)n+="string"==typeof t?t:String(t);else n+="string"==typeof e?e:String(e)}}return n+=e[t]}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class P{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===l||b(e)&&e===this.value||(this.value=e,r(e)||(this.committer.dirty=!0))}commit(){for(;r(this.value);){const e=this.value;this.value=l,e(this)}this.value!==l&&this.committer.commit()}}class x{constructor(e){this.value=void 0,this._pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(y()),this.endNode=e.appendChild(y())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e._insert(this.startNode=y()),e._insert(this.endNode=y())}insertAfterPart(e){e._insert(this.startNode=y()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this._pendingValue=e}commit(){for(;r(this._pendingValue);){const e=this._pendingValue;this._pendingValue=l,e(this)}const e=this._pendingValue;e!==l&&(b(e)?e!==this.value&&this._commitText(e):e instanceof g?this._commitTemplateResult(e):e instanceof Node?this._commitNode(e):Array.isArray(e)||e[Symbol.iterator]?this._commitIterable(e):e===c?(this.value=c,this.clear()):this._commitText(e))}_insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}_commitNode(e){this.value!==e&&(this.clear(),this._insert(e),this.value=e)}_commitText(e){const t=this.startNode.nextSibling;e=null==e?"":e,t===this.endNode.previousSibling&&3===t.nodeType?t.data=e:this._commitNode(document.createTextNode("string"==typeof e?e:String(e))),this.value=e}_commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof _&&this.value.template===t)this.value.update(e.values);else{const n=new _(t,e.processor,this.options),s=n._clone();n.update(e.values),this._commitNode(s),this.value=n}}_commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let n,s=0;for(const r of e)void 0===(n=t[s])&&(n=new x(this.options),t.push(n),0===s?n.appendIntoPart(this):n.insertAfterPart(t[s-1])),n.setValue(r),n.commit(),s++;s<t.length&&(t.length=s,this.clear(n&&n.endNode))}clear(e=this.startNode){a(this.startNode.parentNode,e.nextSibling,this.endNode)}}class C{constructor(e,t,n){if(this.value=void 0,this._pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=n}setValue(e){this._pendingValue=e}commit(){for(;r(this._pendingValue);){const e=this._pendingValue;this._pendingValue=l,e(this)}if(this._pendingValue===l)return;const e=!!this._pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name)),this.value=e,this._pendingValue=l}}class T extends w{constructor(e,t,n){super(e,t,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new E(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class E extends P{}let k=!1;try{const e={get capture(){return k=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}class N{constructor(e,t,n){this.value=void 0,this._pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=n,this._boundHandleEvent=(e=>this.handleEvent(e))}setValue(e){this._pendingValue=e}commit(){for(;r(this._pendingValue);){const e=this._pendingValue;this._pendingValue=l,e(this)}if(this._pendingValue===l)return;const e=this._pendingValue,t=this.value,n=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),s=null!=e&&(null==t||n);n&&this.element.removeEventListener(this.eventName,this._boundHandleEvent,this._options),s&&(this._options=A(e),this.element.addEventListener(this.eventName,this._boundHandleEvent,this._options)),this.value=e,this._pendingValue=l}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const A=e=>e&&(k?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const O=new class{handleAttributeExpressions(e,t,n,s){const r=t[0];return"."===r?new T(e,t.slice(1),n).parts:"@"===r?[new N(e,t.slice(1),s.eventContext)]:"?"===r?[new C(e,t.slice(1),n)]:new w(e,t,n).parts}handleTextExpression(e){return new x(e)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function V(e){let t=R.get(e.type);void 0===t&&(t={stringsArray:new WeakMap,keyString:new Map},R.set(e.type,t));let n=t.stringsArray.get(e.strings);if(void 0!==n)return n;const s=e.strings.join(d);return void 0===(n=t.keyString.get(s))&&(n=new m(e,e.getTemplateElement()),t.keyString.set(s,n)),t.stringsArray.set(e.strings,n),n}const R=new Map,j=new WeakMap;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.0.0");const M=(e,...t)=>new g(e,t,"html",O),L=(e,...t)=>new S(e,t,"svg",O),U=133;function W(e,t){const{element:{content:n},parts:s}=e,r=document.createTreeWalker(n,U,null,!1);let i=$(s),o=s[i],a=-1,l=0;const c=[];let d=null;for(;r.nextNode();){a++;const e=r.currentNode;for(e.previousSibling===d&&(d=null),t.has(e)&&(c.push(e),null===d&&(d=e)),null!==d&&l++;void 0!==o&&o.index===a;)o.index=null!==d?-1:o.index-l,o=s[i=$(s,i)]}c.forEach(e=>e.parentNode.removeChild(e))}const z=e=>{let t=11===e.nodeType?0:1;const n=document.createTreeWalker(e,U,null,!1);for(;n.nextNode();)t++;return t},$=(e,t=-1)=>{for(let n=t+1;n<e.length;n++){const t=e[n];if(f(t))return n}return-1};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const H=(e,t)=>`${e}--${t}`;let q=!0;void 0===window.ShadyCSS?q=!1:void 0===window.ShadyCSS.prepareTemplateDom&&(console.warn("Incompatible ShadyCSS version detected.Please update to at least @webcomponents/webcomponentsjs@2.0.2 and@webcomponents/shadycss@1.3.1."),q=!1);const I=e=>t=>{const n=H(t.type,e);let s=R.get(n);void 0===s&&(s={stringsArray:new WeakMap,keyString:new Map},R.set(n,s));let r=s.stringsArray.get(t.strings);if(void 0!==r)return r;const i=t.strings.join(d);if(void 0===(r=s.keyString.get(i))){const n=t.getTemplateElement();q&&window.ShadyCSS.prepareTemplateDom(n,e),r=new m(t,n),s.keyString.set(i,r)}return s.stringsArray.set(t.strings,r),r},B=["html","svg"],F=new Set,J=(e,t,n)=>{F.add(n);const s=e.querySelectorAll("style");if(0===s.length)return void window.ShadyCSS.prepareTemplateStyles(t.element,n);const r=document.createElement("style");for(let e=0;e<s.length;e++){const t=s[e];t.parentNode.removeChild(t),r.textContent+=t.textContent}if((e=>{B.forEach(t=>{const n=R.get(H(t,e));void 0!==n&&n.keyString.forEach(e=>{const{element:{content:t}}=e,n=new Set;Array.from(t.querySelectorAll("style")).forEach(e=>{n.add(e)}),W(e,n)})})})(n),function(e,t,n=null){const{element:{content:s},parts:r}=e;if(null==n)return void s.appendChild(t);const i=document.createTreeWalker(s,U,null,!1);let o=$(r),a=0,l=-1;for(;i.nextNode();)for(l++,i.currentNode===n&&(a=z(t),n.parentNode.insertBefore(t,n));-1!==o&&r[o].index===l;){if(a>0){for(;-1!==o;)r[o].index+=a,o=$(r,o);return}o=$(r,o)}}(t,r,t.element.content.firstChild),window.ShadyCSS.prepareTemplateStyles(t.element,n),window.ShadyCSS.nativeShadow){const n=t.element.content.querySelector("style");e.insertBefore(n.cloneNode(!0),e.firstChild)}else{t.element.content.insertBefore(r,t.element.content.firstChild);const e=new Set;e.add(r),W(t,e)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
window.JSCompiler_renameProperty=((e,t)=>e);const D={toAttribute(e,t){switch(t){case Boolean:return e?"":null;case Object:case Array:return null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){switch(t){case Boolean:return null!==e;case Number:return null===e?null:Number(e);case Object:case Array:return JSON.parse(e)}return e}},Y=(e,t)=>t!==e&&(t==t||e==e),G={attribute:!0,type:String,converter:D,reflect:!1,hasChanged:Y},X=Promise.resolve(!0),K=1,Q=4,Z=8,ee=16,te=32;class ne extends HTMLElement{constructor(){super(),this._updateState=0,this._instanceProperties=void 0,this._updatePromise=X,this._hasConnectedResolver=void 0,this._changedProperties=new Map,this._reflectingProperties=void 0,this.initialize()}static get observedAttributes(){this.finalize();const e=[];return this._classProperties.forEach((t,n)=>{const s=this._attributeNameForProperty(n,t);void 0!==s&&(this._attributeToPropertyMap.set(s,n),e.push(s))}),e}static _ensureClassProperties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties",this))){this._classProperties=new Map;const e=Object.getPrototypeOf(this)._classProperties;void 0!==e&&e.forEach((e,t)=>this._classProperties.set(t,e))}}static createProperty(e,t=G){if(this._ensureClassProperties(),this._classProperties.set(e,t),t.noAccessor||this.prototype.hasOwnProperty(e))return;const n="symbol"==typeof e?Symbol():`__${e}`;Object.defineProperty(this.prototype,e,{get(){return this[n]},set(t){const s=this[e];this[n]=t,this.requestUpdate(e,s)},configurable:!0,enumerable:!0})}static finalize(){if(this.hasOwnProperty(JSCompiler_renameProperty("finalized",this))&&this.finalized)return;const e=Object.getPrototypeOf(this);if("function"==typeof e.finalize&&e.finalize(),this.finalized=!0,this._ensureClassProperties(),this._attributeToPropertyMap=new Map,this.hasOwnProperty(JSCompiler_renameProperty("properties",this))){const e=this.properties,t=[...Object.getOwnPropertyNames(e),..."function"==typeof Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e):[]];for(const n of t)this.createProperty(n,e[n])}}static _attributeNameForProperty(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}static _valueHasChanged(e,t,n=Y){return n(e,t)}static _propertyValueFromAttribute(e,t){const n=t.type,s=t.converter||D,r="function"==typeof s?s:s.fromAttribute;return r?r(e,n):e}static _propertyValueToAttribute(e,t){if(void 0===t.reflect)return;const n=t.type,s=t.converter;return(s&&s.toAttribute||D.toAttribute)(e,n)}initialize(){this._saveInstanceProperties()}_saveInstanceProperties(){this.constructor._classProperties.forEach((e,t)=>{if(this.hasOwnProperty(t)){const e=this[t];delete this[t],this._instanceProperties||(this._instanceProperties=new Map),this._instanceProperties.set(t,e)}})}_applyInstanceProperties(){this._instanceProperties.forEach((e,t)=>this[t]=e),this._instanceProperties=void 0}connectedCallback(){this._updateState=this._updateState|te,this._hasConnectedResolver?(this._hasConnectedResolver(),this._hasConnectedResolver=void 0):this.requestUpdate()}disconnectedCallback(){}attributeChangedCallback(e,t,n){t!==n&&this._attributeToProperty(e,n)}_propertyToAttribute(e,t,n=G){const s=this.constructor,r=s._attributeNameForProperty(e,n);if(void 0!==r){const e=s._propertyValueToAttribute(t,n);if(void 0===e)return;this._updateState=this._updateState|Z,null==e?this.removeAttribute(r):this.setAttribute(r,e),this._updateState=this._updateState&~Z}}_attributeToProperty(e,t){if(this._updateState&Z)return;const n=this.constructor,s=n._attributeToPropertyMap.get(e);if(void 0!==s){const e=n._classProperties.get(s)||G;this._updateState=this._updateState|ee,this[s]=n._propertyValueFromAttribute(t,e),this._updateState=this._updateState&~ee}}requestUpdate(e,t){let n=!0;if(void 0!==e&&!this._changedProperties.has(e)){const s=this.constructor,r=s._classProperties.get(e)||G;s._valueHasChanged(this[e],t,r.hasChanged)?(this._changedProperties.set(e,t),!0!==r.reflect||this._updateState&ee||(void 0===this._reflectingProperties&&(this._reflectingProperties=new Map),this._reflectingProperties.set(e,r))):n=!1}return!this._hasRequestedUpdate&&n&&this._enqueueUpdate(),this.updateComplete}async _enqueueUpdate(){let e;this._updateState=this._updateState|Q;const t=this._updatePromise;this._updatePromise=new Promise(t=>e=t),await t,this._hasConnected||await new Promise(e=>this._hasConnectedResolver=e);const n=this.performUpdate();null!=n&&"function"==typeof n.then&&await n,e(!this._hasRequestedUpdate)}get _hasConnected(){return this._updateState&te}get _hasRequestedUpdate(){return this._updateState&Q}get hasUpdated(){return this._updateState&K}performUpdate(){if(this._instanceProperties&&this._applyInstanceProperties(),this.shouldUpdate(this._changedProperties)){const e=this._changedProperties;this.update(e),this._markUpdated(),this._updateState&K||(this._updateState=this._updateState|K,this.firstUpdated(e)),this.updated(e)}else this._markUpdated()}_markUpdated(){this._changedProperties=new Map,this._updateState=this._updateState&~Q}get updateComplete(){return this._updatePromise}shouldUpdate(e){return!0}update(e){void 0!==this._reflectingProperties&&this._reflectingProperties.size>0&&(this._reflectingProperties.forEach((e,t)=>this._propertyToAttribute(t,this[t],e)),this._reflectingProperties=void 0)}updated(e){}firstUpdated(e){}}ne.finalized=!0;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const se=e=>t=>"function"==typeof t?((e,t)=>(window.customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:n,elements:s}=t;return{kind:n,elements:s,finisher(t){window.customElements.define(e,t)}}})(e,t),re=(e,t)=>"method"!==t.kind||!t.descriptor||"value"in t.descriptor?{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}}:Object.assign({},t,{finisher(n){n.createProperty(t.key,e)}}),ie=(e,t,n)=>{t.constructor.createProperty(n,e)};function oe(e){return(t,n)=>void 0!==n?ie(e,t,n):re(e,t)}const ae=ue((e,t)=>e.querySelector(t)),le=ue((e,t)=>e.querySelectorAll(t)),ce=(e,t,n)=>{Object.defineProperty(t,n,e)},de=(e,t)=>({kind:"method",placement:"prototype",key:t.key,descriptor:e});function ue(e){return t=>(n,s)=>{const r={get(){return e(this.renderRoot,t)},enumerable:!0,configurable:!0};return void 0!==s?ce(r,n,s):de(r,n)}}const pe=e=>(t,n)=>void 0!==n?((e,t,n)=>{Object.assign(t[n],e)})(e,t,n):((e,t)=>Object.assign({},t,{finisher(n){Object.assign(n.prototype[t.key],e)}}))(e,t),he="adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,me=Symbol();class fe{constructor(e,t){if(t!==me)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e}get styleSheet(){return void 0===this._styleSheet&&(he?(this._styleSheet=new CSSStyleSheet,this._styleSheet.replaceSync(this.cssText)):this._styleSheet=null),this._styleSheet}toString(){return this.cssText}}const ye=e=>new fe(String(e),me),ve=(e,...t)=>{const n=t.reduce((t,n,s)=>t+(e=>{if(e instanceof fe)return e.cssText;throw new Error(`Value passed to 'css' function must be a 'css' function result: ${e}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`)})(n)+e[s+1],e[0]);return new fe(n,me)};n.d(t,"LitElement",function(){return ge}),n.d(t,"defaultConverter",function(){return D}),n.d(t,"notEqual",function(){return Y}),n.d(t,"UpdatingElement",function(){return ne}),n.d(t,"customElement",function(){return se}),n.d(t,"property",function(){return oe}),n.d(t,"query",function(){return ae}),n.d(t,"queryAll",function(){return le}),n.d(t,"eventOptions",function(){return pe}),n.d(t,"html",function(){return M}),n.d(t,"svg",function(){return L}),n.d(t,"TemplateResult",function(){return g}),n.d(t,"SVGTemplateResult",function(){return S}),n.d(t,"supportsAdoptingStyleSheets",function(){return he}),n.d(t,"CSSResult",function(){return fe}),n.d(t,"unsafeCSS",function(){return ye}),n.d(t,"css",function(){return ve}),
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litElementVersions||(window.litElementVersions=[])).push("2.0.1");const _e=e=>e.flat?e.flat(1/0):function e(t,n=[]){for(let s=0,r=t.length;s<r;s++){const r=t[s];Array.isArray(r)?e(r,n):n.push(r)}return n}(e);class ge extends ne{static finalize(){super.finalize(),this._styles=this.hasOwnProperty(JSCompiler_renameProperty("styles",this))?this._getUniqueStyles():this._styles||[]}static _getUniqueStyles(){const e=this.styles,t=[];if(Array.isArray(e)){_e(e).reduceRight((e,t)=>(e.add(t),e),new Set).forEach(e=>t.unshift(e))}else e&&t.push(e);return t}initialize(){super.initialize(),this.renderRoot=this.createRenderRoot(),window.ShadowRoot&&this.renderRoot instanceof window.ShadowRoot&&this.adoptStyles()}createRenderRoot(){return this.attachShadow({mode:"open"})}adoptStyles(){const e=this.constructor._styles;0!==e.length&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow?he?this.renderRoot.adoptedStyleSheets=e.map(e=>e.styleSheet):this._needsShimAdoptedStyleSheets=!0:window.ShadyCSS.ScopingShim.prepareAdoptedCssText(e.map(e=>e.cssText),this.localName))}connectedCallback(){super.connectedCallback(),this.hasUpdated&&void 0!==window.ShadyCSS&&window.ShadyCSS.styleElement(this)}update(e){super.update(e);const t=this.render();t instanceof g&&this.constructor.render(t,this.renderRoot,{scopeName:this.localName,eventContext:this}),this._needsShimAdoptedStyleSheets&&(this._needsShimAdoptedStyleSheets=!1,this.constructor._styles.forEach(e=>{const t=document.createElement("style");t.textContent=e.cssText,this.renderRoot.appendChild(t)}))}render(){}}ge.finalized=!0,ge.render=((e,t,n)=>{const s=n.scopeName,r=j.has(t),i=t instanceof ShadowRoot&&q&&e instanceof g,o=i&&!F.has(s),l=o?document.createDocumentFragment():t;if(((e,t,n)=>{let s=j.get(t);void 0===s&&(a(t,t.firstChild),j.set(t,s=new x(Object.assign({templateFactory:V},n))),s.appendInto(t)),s.setValue(e),s.commit()})(e,l,Object.assign({templateFactory:I(s)},n)),o){const e=j.get(l);j.delete(l),e.value instanceof _&&J(l,e.value.template,s),a(t,t.firstChild),t.appendChild(l),j.set(t,e)}!r&&i&&window.ShadyCSS.styleElement(t.host)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,